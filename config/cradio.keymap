/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define NAV_L 1
#define OTHER_L 2
#define NUM_L 3
#define SYM_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
//&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        //#ifndef HOMEY_HOLDING_TYPE
        //#define HOMEY_HOLDING_TYPE "balanced"
        //#endif
        //#ifndef HOMEY_HOLDING_TIME
        //#define HOMEY_HOLDING_TIME 270
        //#endif
        //#ifndef HOMEY_STREAK_DECAY
        //#define HOMEY_STREAK_DECAY 170
        //#endif
        //#ifndef HOMEY_REPEAT_DECAY
        //#define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        //#endif

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-on-release;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //label = "Home row left";
            //hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 32>;

            require-prior-idle-ms = <160>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-on-release;
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //label = "Home row right";
            //hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;

            require-prior-idle-ms = <160>;
        };

        tapmod_thumb: miryoku_tapmod_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_MOD_THUMB";
            flavor = "tap-preferred";
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //retro-tap;
        };

        layer_thumb: miryoku_home_row_layer_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LAYER_THUMB";
            flavor = "balanced";
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <200>;
            quick-tap-ms = <250>;

            //require-prior-idle-ms = <170>;

            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            //retro-tap;
        };

        taphold: taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        tapholdlong: tapholdlong {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLDLONG";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        hmlLayer: hmlLayer {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            hold-trigger-on-release;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            require-prior-idle-ms = <160>;
            label = "Layer en hrm";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W        &hml LALT E   &kp R                 &kp T                   &kp Y                          &kp U                              &hmr LALT I   &kp O        &kp P
&hml LCMD A  &hml RALT S  &hml LCTRL D  &hml LSHIFT F         &kp G                   &kp H                          &hmr RSHIFT J                      &hmr RCTRL K  &hmr RALT L  &hmr LCMD SEMI
&kp Z        &kp X        &kp C         &kp V                 &kp B                   &kp N                          &kp M                              &kp COMMA     &kp DOT      &kp FSLH
                                        &layer_thumb 1 SPACE  &layer_thumb 2 ENTER    &tapmod_thumb RIGHT_SHIFT TAB  &tapmod_thumb RIGHT_ALT BACKSPACE
            >;
        };

        arrow_and_num {
            bindings = <
&kp HOME         &kp PG_UP         &kp UP       &kp PAGE_DOWN      &kp END          &kp KP_NUM    &kp N4  &kp N5  &kp N6  &kp INSERT
&kp LC(LA(DEL))  &kp LEFT          &kp DOWN     &kp RIGHT          &kp PSCRN        &kp KP_SLASH  &kp N1  &kp N2  &kp N3  &kp KP_MINUS
&kp LC(LG(F4))   &kp LC(LG(LEFT))  &kp LG(TAB)  &kp LC(LG(RIGHT))  &kp LC(LG(D))    &kp KP_DOT    &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY
                                                &trans             &trans           &trans        &kp N0
            >;
        };

        Fx_and_Co {
            bindings = <
&none  &kp LG(L)   &kp LEFT_GUI  &kp CAPSLOCK  &kp C_POWER    &kp C_VOL_UP       &kp F1  &kp F2   &kp F3   &kp F4
&none  &kp DELETE  &kp ESC       &kp TAB       &kp C_SLEEP    &kp C_VOLUME_DOWN  &kp F5  &kp F6   &kp F7   &kp F8
&none  &kp LC(X)   &kp LS(INS)   &kp LC(INS)   &kp LC(D)      &kp C_MUTE         &kp F9  &kp F10  &kp F11  &kp F12
                                 &trans        &trans         &trans             &trans
            >;
        };

        Gest_keyboard {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &none   &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &none   &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &none   &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        param {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
